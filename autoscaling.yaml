AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'

Description: Contains autoscaling structure for deploying wordpress

# ******************* Parameters *********************
Parameters:
  Environment:
    Description: Different environments types
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - testing
    - prod

  TargetGroupName:
    Description: Name of target group
    Type: String
    Default: mustafa-tg

  LoadBalancerName:
    Description: Name of load balancer
    Type: String
    Default: mustafa-lb

  LaunchTemplateName:
    Description: Name of launch template
    Type: String
    Default: mustafa-lt

  LaunchTemplateVersion:
    Description: Version of the launch template
    Type: String
    Default: "1"

  KeyName:
    Description: Name of key for ssh
    Type: String
    Default: mustafa-oregon-key

  # RdsDbName:
  #   Description: Name of database used in RDS
  #   Type: String
  #   Default: !ImportValue mustafa-rds-stack-RdsDbName

  # RdsMasterUsername:
  #   Description: Database Username
  #   Type: String
  #   Default: !ImportValue mustafa-rds-stack-RdsMasterUsername

  # RdsMasterPassword:
  #   Description: Database Password
  #   Type: String
  #   Default: !ImportValue mustafa-rds-stack-RdsMasterPassword

  # RdsEndpointAddress:
  #   Description: Endpoint address of RDS database
  #   Type: String
  #   Default: !ImportValue mustafa-rds-stack-RdsEndpointAddress

  AutoscalingGroupName:
    Description: Name of autoscaling group
    Type: String
    Default: msuataf-asg

  AvailabilityZones:
    Description: List of all AZs in the region
    Type: List<AWS::EC2::AvailabilityZone::Name>

  AsgCooldown:
    Description: Time(seconds) required to perform next activity
    Type: String
    Default: '300'

  AsgDesiredCapacityType:
    Description: Capacity type to measure instances
    Type: String
    Default: 'units'

  AsgDesiredCapacity:
    Description: Numbers of desired instances running at initialization
    Type: String
    Default: '2'

  AsgMinSize:
    Description: Min numbers of instances running
    Type: String
    Default: '1'

  AsgMaxSize:
    Description: Max numbers of instances running
    Type: String
    Default: '4'

# ******************* Mappings *********************
Mappings:
  EnvironmentConfig:
    dev:
      InstanceType: t2.micro
      ami: ami-0d61ea20f09848335
    testing:
      InstanceType: t2.micro
      ami: ami-0d61ea20f09848335
    prod:
      InstanceType: t2.micro
      ami: ami-0d61ea20f09848335

# ******************* Resources *********************
Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-${TargetGroupName}-${AWS::Region}"
      TargetType: instance
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /wp-admin/install.php
      VpcId: !ImportValue mustafa-vpc-stack-VpcId
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${TargetGroupName}-${AWS::Region}"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub "${Environment}-${LoadBalancerName}-${AWS::Region}"
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
      - !ImportValue mustafa-rds-stack-SecurityGroupId
      Subnets:
      - !Select
        - 0
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PublicSubnetIds
      - !Select
        - 1
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PublicSubnetIds
      - !Select
        - 2
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PublicSubnetIds
      - !Select
        - 3
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PublicSubnetIds
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${LoadBalancerName}-${AWS::Region}"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-${LaunchTemplateName}-${AWS::Region}"
      VersionDescription: !Ref LaunchTemplateVersion
      LaunchTemplateData:
        InstanceType: !FindInMap [ EnvironmentConfig, !Ref Environment, InstanceType ]
        ImageId: !FindInMap [ EnvironmentConfig, !Ref Environment, ami ]
        KeyName: !Ref KeyName
        SecurityGroupIds:
        - !ImportValue mustafa-rds-stack-SecurityGroupId
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              sudo yum update -y
              sudo amazon-linux-extras install php7.4 -y
              sudo yum install httpd -y
              sudo yum install mysql -y
              sudo yum install php-mysqlnd php-fpm php-json php-xml php-gd php-mbstring -y
              sudo systemctl enable httpd
              sudo systemctl start httpd
              wget https://wordpress.org/latest.tar.gz
              tar -xvzf latest.tar.gz
              sudo mv wordpress/* /var/www/html/
              sudo chown -R apache:apache /var/www/html/
              sudo systemctl restart httpd
              sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
              sudo sed -i "s/database_name_here/${RdsDbName}/" /var/www/html/wp-config.php
              sudo sed -i "s/username_here/${RdsMasterUsername}/" /var/www/html/wp-config.php
              sudo sed -i "s/password_here/${RdsMasterPassword}/" /var/www/html/wp-config.php
              sudo sed -i "s/localhost/${RdsEndpointAddress}/" /var/www/html/wp-config.php
              sudo systemctl restart httpd
            - { RdsDbName: !ImportValue mustafa-rds-stack-RdsDbName, RdsMasterUsername: !ImportValue mustafa-rds-stack-RdsMasterUsername, RdsMasterPassword: !ImportValue mustafa-rds-stack-RdsMasterPassword, RdsEndpointAddress: !ImportValue mustafa-rds-stack-RdsEndpointAddress }

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    # DependsOn: LaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub "${Environment}-${AutoscalingGroupName}-${AWS::Region}"
      AvailabilityZones: !Ref AvailabilityZones
      Cooldown: !Ref AsgCooldown
      DesiredCapacity: !Ref AsgDesiredCapacity
      DesiredCapacityType: !Ref AsgDesiredCapacityType
      MaxSize: !Ref AsgMaxSize
      MinSize: !Ref AsgMinSize
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !Ref LaunchTemplateVersion
      VPCZoneIdentifier:
      - !Select
        - 0
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 1
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 2
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 3
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      HealthCheckType: 'EC2'
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
      - !Ref TargetGroup
      Tags:
      - Key: 'Name'
        Value: !Sub "${Environment}-${AutoscalingGroupName}-${AWS::Region}"
        PropagateAtLaunch: true

  # Add CloudWatch Alarms and Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80.0

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 40.0

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm to scale up when CPU usage exceeds 80% for 5 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm to scale down when CPU usage is below 40% for 10 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      Threshold: 40
      ComparisonOperator: LessThanThreshold
      AlarmActions:
      - !Ref ScaleDownPolicy

# ******************* Outputs *********************
Outputs:
  LoadBalancerDnsName:
    Description: DNS Name of Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
