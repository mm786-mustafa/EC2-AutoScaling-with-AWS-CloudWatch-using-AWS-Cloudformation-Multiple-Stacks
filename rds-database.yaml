AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'

Description: Contains RDS and Security for deploying wordpress

# ******************* Parameters *********************
Parameters:
  Environment:
    Description: Different environments types
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - testing
    - prod

  SecurityGroupName:
    Description: name of security group
    Type: String
    Default: mustafa-sg

  RdsDbInstanceName:
    Description: Name of RDS database instance
    Type: String
    Default: mustafa-db

  RdsEngineName:
    Description: Name of engine to use
    Type: String
    Default: MySQL

  RdsEngineVersion:
    Description: Version of engine to use
    Type: Number
    Default: 8.0

  RdsDbInstanceClass:
    Description: Class of database to use
    Type: String
    Default: db.t3.micro

  RdsStorageType:
    Description: Type of storage to use for the RDS database
    Type: String
    Default: gp2

  RdsAllocatedStorage:
    Description: Storage required to allocate to database
    Type: Number
    Default: 20

  RdsMasterUsername:
    Description: Username for RDS databse
    Type: String
    Default: m_mustafa

  RdsMasterPassword:
    Description: Password required for RDS database
    Type: String
    Default: no1knows768

  RdsDatabaseName:
    Description: Name of database to use in RDS
    Type: String
    Default: wordpress

# ******************* Resources *********************
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and MySQL port
      VpcId: !ImportValue mustafa-vpc-stack-VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !ImportValue mustafa-vpc-stack-VpcCidr
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${SecurityGroupName}-${AWS::Region}"
      - Key: Stack-Name
        Value: AWS::StackName

  RdsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: !Ref RdsEngineName
      EngineVersion: !Ref RdsEngineVersion
      DBInstanceIdentifier: !Sub "${Environment}-${RdsDbInstanceName}-${AWS::Region}"
      DBInstanceClass: !Ref RdsDbInstanceClass
      StorageType: !Ref RdsStorageType
      AllocatedStorage: !Ref RdsAllocatedStorage
      MasterUsername: !Ref RdsMasterUsername
      MasterUserPassword: !Ref RdsMasterPassword
      DBName: !Ref RdsDatabaseName
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
      - !Ref SecurityGroup
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${RdsDbInstanceName}-${AWS::Region}"
      - Key: Stack-Name
        Value: AWS::StackName

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
      - !Select
        - 0
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 1
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 2
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds
      - !Select
        - 3
        - !Split
          - ","
          - !ImportValue mustafa-vpc-stack-PrivateSubnetIds

# ******************* Outputs *********************
Outputs:
  SecurityGroupId:
    Description: Id of security group
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  RdsEndpointAddress:
    Description: Endpoint Address of Rds Database
    Value: !GetAtt RdsDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RdsEndpointAddress"

  RdsDbName:
    Description: Name of database used in RDS
    Value: !GetAtt RdsDatabase.DBName
    Export:
      Name: !Sub "${AWS::StackName}-RdsDbName"

  RdsMasterUsername:
    Description: Database Username
    Value: !GetAtt RdsDatabase.MasterUsername
    Export:
      Name: !Sub "${AWS::StackName}-RdsMasterUsername"

  RdsMasterPassword:
    Description: Database Password
    Value: !Ref RdsMasterPassword
    Export:
      Name: !Sub "${AWS::StackName}-RdsMasterPassword"
